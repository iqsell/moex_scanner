import os
import json
import asyncio
from collections import deque
from datetime import datetime, timedelta
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MOEX_TOKEN = ''
TELEGRAM_BOT_TOKEN = ''
CHANNEL_ID =   # –ß–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AlertStates(StatesGroup):
    waiting_for_interval = State()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
known_alerts = set()  # –•—Ä–∞–Ω–∏—Ç ID –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
check_interval = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)


def get_alert_description(alert_type):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞"""
    descriptions = {
        'vol_s_99_9_pctl': '–ö—Ä—É–ø–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞',
        'vol_b_99_9_pctl': '–ö—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
        'vol_s_99_pctl': '–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
        'vol_b_99_pctl': '–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫',
        'vol_99_9_pctl': '–ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞',
        'vol_s_95_pctl': '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
        'vol_b_95_pctl': '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫',
        'net_vol_99_9_pctl-': '–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤',
        'pr_change_99_9_pctl-': '–°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã',
        'net_vol_99_9_pctl+': '–ö—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
        'pr_change_99_9_pctl+': '–°–∏–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã',
        'vol_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º',
        'vol_s_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞',
        'pr_change_min': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã',
        'pr_change_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã',
        'net_vol_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º(net)',
        'vol_b_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
        'pr_low_min': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞',
        'net_vol_min': '–ö—Ä—É–ø–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞(net)',
        'pr_high_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞'
    }
    return descriptions.get(alert_type, alert_type)


def format_value(value, alert_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞"""
    try:
        value = float(value)
        if alert_type in ['pr_low_min', 'pr_high_max']:
            return f"{value:.2f} ‚ÇΩ"
        elif 'change' in alert_type:
            return f"{value:.2f}%"
        else:
            return f"{int(value)} –ª–æ—Ç"
    except (ValueError, TypeError):
        return str(value)


def format_probability(m_15_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"""
    if not m_15_data or len(m_15_data) < 5:
        return ""

    try:
        change_value = m_15_data[4]
        if change_value is None:
            change_percent = 0.0
        else:
            change_percent = float(change_value)

        formatted_percent = f"{change_percent:.2f}%"

        if formatted_percent.endswith(".00%"):
            formatted_percent = formatted_percent.replace(".00%", "%")
        elif formatted_percent.endswith("0%"):
            formatted_percent = formatted_percent.replace("0%", "%")

    except (ValueError, TypeError, IndexError):
        formatted_percent = "0%"

    up = m_15_data[2] if len(m_15_data) > 2 and m_15_data[2] is not None else 0
    down = m_15_data[3] if len(m_15_data) > 3 and m_15_data[3] is not None else 0

    return f"{formatted_percent} ‚Üë{up} ‚Üì{down}"


def fetch_moex_alerts():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–π —Å MOEX API"""
    current_date = datetime.now().strftime('%Y-%m-%d')
    api_url = f'https://apim.moex.com/iss/datashop/algopack/eq/alerts.json?date={current_date}'

    headers = {
        'Authorization': f'Bearer {MOEX_TOKEN}',
        'Accept': 'application/json'
    }

    try:
        response = requests.get(api_url, headers=headers, timeout=10)
        response.raise_for_status()

        if response.status_code == 200:
            data = response.json()
            if 'data' in data and 'data' in data['data']:
                return data['data']['data']
            else:
                print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")
                return None
        else:
            print(f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
        return None


def parse_alert(alert):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    try:
        alert_datetime = datetime.strptime(f"{alert[0]} {alert[1]}", "%Y-%m-%d %H:%M:%S")
        alert_data = {
            'date': alert[0],
            'time': alert[1],
            'ticker': alert[2],
            'alert_type': alert[3],
            'threshold': alert[4],
            'value': alert[5],
            'processed_time': alert[7],
            'datetime': alert_datetime
        }

        details = json.loads(alert[6])
        if isinstance(details, list) and len(details) > 0:
            details = details[0]

        m_15 = details.get('m_15', [])

        alert_data.update({
            'm_15': m_15,
            'vol_b': details.get('vol_b', 0),
            'vol_s': details.get('vol_s', 0),
            'change_percent': m_15[4] if m_15 and len(m_15) > 4 else "0",
            'up_count': m_15[2] if m_15 and len(m_15) > 2 else 0,
            'down_count': m_15[3] if m_15 and len(m_15) > 3 else 0
        })

        return alert_data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–∞: {str(e)}")
        print("–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:", alert)
        return None


async def send_alert_to_channel(alert):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –≤ –∫–∞–Ω–∞–ª"""
    alert_desc = get_alert_description(alert['alert_type'])
    prob_str = format_probability(alert['m_15'])
    value_str = format_value(alert['value'], alert['alert_type'])
    threshold_str = format_value(alert['threshold'], alert['alert_type'])

    message = (
        f"üö® <b>{alert_desc}</b>\n"
        f"üìä <b>–¢–∏–∫–µ—Ä:</b> {alert['ticker']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {alert['time']}\n"
        f"üìà <b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {value_str} (–ø–æ—Ä–æ–≥: {threshold_str})\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 15 –º–∏–Ω:</b> {prob_str}\n"
        f"üîç <b>–ü—Ä–æ–¥–∞–∂–∏:</b> {alert['vol_s']} –ª–æ—Ç | <b>–ü–æ–∫—É–ø–∫–∏:</b> {alert['vol_b']} –ª–æ—Ç"
    )

    try:
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=message,
            parse_mode='HTML'
        )
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –¥–ª—è {alert['ticker']}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")


async def check_new_alerts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)"""
    global known_alerts

    current_time = datetime.now()
    one_hour_ago = current_time - timedelta(hours=1)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {one_hour_ago} –ø–æ {current_time}")

    alerts = fetch_moex_alerts()
    if not alerts:
        return

    new_alerts = []
    for alert_data in alerts:
        alert = parse_alert(alert_data)
        if not alert:
            continue

        alert_id = f"{alert['ticker']}_{alert['time']}_{alert['alert_type']}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–ª–µ—Ä—Ç —Å–≤–µ–∂–∏–π (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞) –∏ –µ—â–µ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if alert['datetime'] >= one_hour_ago and alert_id not in known_alerts:
            known_alerts.add(alert_id)
            new_alerts.append(alert)

    if new_alerts:
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(new_alerts)} –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        for alert in sorted(new_alerts, key=lambda x: x['datetime']):
            await send_alert_to_channel(alert)
    else:
        print("–ù–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


async def scheduled_checker():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    while True:
        await check_new_alerts()
        await asyncio.sleep(check_interval)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–≤–µ–∂–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ MOEX –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/check_now - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–ª–µ—Ä—Ç—ã —Å–µ–π—á–∞—Å\n"
        "/set_interval - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)\n"
        "/current_interval - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )
    await message.answer(help_text, parse_mode='HTML')


@dp.message(Command("check_now"))
async def cmd_check_now(message: Message):
    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å–≤–µ–∂–∏–µ –∞–ª–µ—Ä—Ç—ã...")
    await check_new_alerts()
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


@dp.message(Command("current_interval"))
async def cmd_current_interval(message: Message):
    minutes = check_interval // 60
    await message.answer(f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {minutes} –º–∏–Ω—É—Ç")


@dp.message(Command("set_interval"))
async def cmd_set_interval(message: Message, state: FSMContext):
    await state.set_state(AlertStates.waiting_for_interval)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (1-60):")


@dp.message(AlertStates.waiting_for_interval)
async def process_interval(message: Message, state: FSMContext):
    try:
        minutes = int(message.text)
        if 1 <= minutes <= 60:
            global check_interval
            check_interval = minutes * 60
            await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
    await state.clear()


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    asyncio.create_task(scheduled_checker())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–≤–µ–∂–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)")


async def main():
    await on_startup()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())