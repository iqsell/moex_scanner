import os
import json
from aiogram.types import Message
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import requests
import random
import string
import sqlite3

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MOEX_TOKEN = ''
TELEGRAM_BOT_TOKEN = ''
ALERTS_CHANNEL_ID =   # –ß–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞
ADMIN_ID =   # –í–∞—à ID –≤ Telegram
PAYMENT_PHONE = '+79998887766'  # –ù–æ–º–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã
TRIAL_PERIOD_HOURS = 24  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
known_alerts = set()  # –•—Ä–∞–Ω–∏—Ç ID –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
check_interval = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)


# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT,
        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        trial_start_date TIMESTAMP NULL,
        banned BOOLEAN DEFAULT FALSE
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscriptions (
        subscription_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        start_date TIMESTAMP,
        end_date TIMESTAMP,
        status TEXT DEFAULT 'active',
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payments (
        payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        amount REAL,
        comment TEXT,
        status TEXT DEFAULT 'pending',
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')

    conn.commit()
    conn.close()


init_db()


def get_alert_description(alert_type):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞"""
    descriptions = {
        'vol_s_99_9_pctl': '–ö—Ä—É–ø–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞',
        'vol_b_99_9_pctl': '–ö—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
        'vol_s_99_pctl': '–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
        'vol_b_99_pctl': '–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫',
        'vol_99_9_pctl': '–ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞',
        'vol_s_95_pctl': '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
        'vol_b_95_pctl': '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫',
        'net_vol_99_9_pctl-': '–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤',
        'pr_change_99_9_pctl-': '–°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã',
        'net_vol_99_9_pctl+': '–ö—Ä—É–ø–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
        'pr_change_99_9_pctl+': '–°–∏–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã',
        'vol_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º',
        'vol_s_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞',
        'pr_change_min': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã',
        'pr_change_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã',
        'net_vol_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º(net)',
        'vol_b_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
        'pr_low_min': '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞',
        'net_vol_min': '–ö—Ä—É–ø–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞(net)',
        'pr_high_max': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞'
    }
    return descriptions.get(alert_type, alert_type)


def format_value(value, alert_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞"""
    try:
        value = float(value)
        if alert_type in ['pr_low_min', 'pr_high_max']:
            return f"{value:.2f} ‚ÇΩ"
        elif 'change' in alert_type:
            return f"{value:.2f}%"
        else:
            return f"{int(value)} –ª–æ—Ç"
    except (ValueError, TypeError):
        return str(value)


def format_probability(m_15_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏"""
    if not m_15_data or len(m_15_data) < 5:
        return ""

    try:
        change_value = m_15_data[4]
        if change_value is None:
            change_percent = 0.0
        else:
            change_percent = float(change_value)

        formatted_percent = f"{change_percent:.2f}%"

        if formatted_percent.endswith(".00%"):
            formatted_percent = formatted_percent.replace(".00%", "%")
        elif formatted_percent.endswith("0%"):
            formatted_percent = formatted_percent.replace("0%", "%")

    except (ValueError, TypeError, IndexError):
        formatted_percent = "0%"

    up = m_15_data[2] if len(m_15_data) > 2 and m_15_data[2] is not None else 0
    down = m_15_data[3] if len(m_15_data) > 3 and m_15_data[3] is not None else 0

    return f"{formatted_percent} ‚Üë{up} ‚Üì{down}"

async def unban_user(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞"""
    try:
        await bot.unban_chat_member(
            chat_id=ALERTS_CHANNEL_ID,
            user_id=user_id,
            only_if_banned=True  # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω
        )
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


def fetch_moex_alerts():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–π —Å MOEX API"""
    current_date = datetime.now().strftime('%Y-%m-%d')
    api_url = f'https://apim.moex.com/iss/datashop/algopack/eq/alerts.json?date={current_date}'

    headers = {
        'Authorization': f'Bearer {MOEX_TOKEN}',
        'Accept': 'application/json'
    }

    try:
        response = requests.get(api_url, headers=headers, timeout=10)
        response.raise_for_status()

        if response.status_code == 200:
            data = response.json()
            if 'data' in data and 'data' in data['data']:
                return data['data']['data']
            else:
                print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")
                return None
        else:
            print(f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
        return None


def parse_alert(alert):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    try:
        alert_datetime = datetime.strptime(f"{alert[0]} {alert[1]}", "%Y-%m-%d %H:%M:%S")
        alert_data = {
            'date': alert[0],
            'time': alert[1],
            'ticker': alert[2],
            'alert_type': alert[3],
            'threshold': alert[4],
            'value': alert[5],
            'processed_time': alert[7],
            'datetime': alert_datetime
        }

        details = json.loads(alert[6])
        if isinstance(details, list) and len(details) > 0:
            details = details[0]

        m_15 = details.get('m_15', [])

        alert_data.update({
            'm_15': m_15,
            'vol_b': details.get('vol_b', 0),
            'vol_s': details.get('vol_s', 0),
            'change_percent': m_15[4] if m_15 and len(m_15) > 4 else "0",
            'up_count': m_15[2] if m_15 and len(m_15) > 2 else 0,
            'down_count': m_15[3] if m_15 and len(m_15) > 3 else 0
        })

        return alert_data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–∞: {str(e)}")
        print("–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:", alert)
        return None


async def send_alert_to_channel(alert):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –≤ –∫–∞–Ω–∞–ª"""
    alert_desc = get_alert_description(alert['alert_type'])
    prob_str = format_probability(alert['m_15'])
    value_str = format_value(alert['value'], alert['alert_type'])
    threshold_str = format_value(alert['threshold'], alert['alert_type'])

    message = (
        f"üö® <b>{alert_desc}</b>\n"
        f"üìä <b>–¢–∏–∫–µ—Ä:</b> {alert['ticker']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {alert['time']}\n"
        f"üìà <b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {value_str} (–ø–æ—Ä–æ–≥: {threshold_str})\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 15 –º–∏–Ω:</b> {prob_str}\n"
        f"üîç <b>–ü—Ä–æ–¥–∞–∂–∏:</b> {alert['vol_s']} –ª–æ—Ç | <b>–ü–æ–∫—É–ø–∫–∏:</b> {alert['vol_b']} –ª–æ—Ç"
    )

    try:
        await bot.send_message(
            chat_id=ALERTS_CHANNEL_ID,
            text=message,
            parse_mode='HTML'
        )
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –¥–ª—è {alert['ticker']}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")


async def check_new_alerts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)"""
    global known_alerts

    current_time = datetime.now()
    one_hour_ago = current_time - timedelta(hours=1)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {one_hour_ago} –ø–æ {current_time}")

    alerts = fetch_moex_alerts()
    if not alerts:
        return

    new_alerts = []
    for alert_data in alerts:
        alert = parse_alert(alert_data)
        if not alert:
            continue

        alert_id = f"{alert['ticker']}_{alert['time']}_{alert['alert_type']}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–ª–µ—Ä—Ç —Å–≤–µ–∂–∏–π (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞) –∏ –µ—â–µ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if alert['datetime'] >= one_hour_ago and alert_id not in known_alerts:
            known_alerts.add(alert_id)
            new_alerts.append(alert)

    if new_alerts:
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(new_alerts)} –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        for alert in sorted(new_alerts, key=lambda x: x['datetime']):
            await send_alert_to_channel(alert)
    else:
        print("–ù–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


async def scheduled_checker():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    while True:
        await check_new_alerts()
        await asyncio.sleep(check_interval)


def add_user(user_id, username, full_name):
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, full_name, trial_start_date) 
    VALUES (?, ?, ?, ?)
    ''', (user_id, username, full_name, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    conn.close()


def check_trial_period(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT trial_start_date, banned FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç—Ä–∏–∞–ª
    if not result or not result[0] or result[1]:
        return False

    trial_start = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
    return (datetime.now() - trial_start) < timedelta(hours=TRIAL_PERIOD_HOURS)


def check_user_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ None"""
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT banned FROM users WHERE user_id = ?', (user_id,))
    banned = cursor.fetchone()
    if banned and banned[0]:
        conn.close()
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    cursor.execute('SELECT trial_start_date FROM users WHERE user_id = ?', (user_id,))
    trial_start = cursor.fetchone()
    if trial_start and trial_start[0]:
        trial_end = datetime.strptime(trial_start[0], '%Y-%m-%d %H:%M:%S') + timedelta(hours=TRIAL_PERIOD_HOURS)
        if datetime.now() < trial_end:
            conn.close()
            return trial_end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('''
    SELECT end_date FROM subscriptions 
    WHERE user_id = ? AND status = 'active' AND datetime(end_date) > datetime(?)
    ORDER BY end_date DESC LIMIT 1
    ''', (user_id, current_time))
    active_sub = cursor.fetchone()

    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –ø–æ–º–µ—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–∞–∫ expired
    if not active_sub:
        cursor.execute('''
        SELECT subscription_id, end_date FROM subscriptions 
        WHERE user_id = ? AND status = 'active' AND datetime(end_date) <= datetime(?)
        ''', (user_id, current_time))
        expired_subs = cursor.fetchall()

        for sub_id, end_date in expired_subs:
            cursor.execute('''
            UPDATE subscriptions SET status = 'expired' 
            WHERE subscription_id = ?
            ''', (sub_id,))
            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            asyncio.create_task(notify_subscription_expired(user_id, end_date))

            # –ë–∞–Ω–∏–º –≤ –∫–∞–Ω–∞–ª–µ
            asyncio.create_task(
                bot.ban_chat_member(
                    chat_id=ALERTS_CHANNEL_ID,
                    user_id=user_id
                )
            )

            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ
            cursor.execute('UPDATE users SET banned = TRUE WHERE user_id = ?', (user_id,))
            conn.commit()

    conn.close()
    return active_sub[0] if active_sub else None


async def notify_subscription_expired(user_id, end_date):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await bot.send_message(
            user_id,
            f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {end_date}. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.\n"
            "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–æ–≤–∞."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def add_subscription(user_id, days):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()

    # –°–Ω–∏–º–∞–µ–º –±–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('UPDATE users SET banned = FALSE WHERE user_id = ?', (user_id,))

    start_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    end_date = (datetime.now() + timedelta(days=days)).strftime('%Y-%m-%d %H:%M:%S')

    cursor.execute('''
    INSERT INTO subscriptions (user_id, start_date, end_date) 
    VALUES (?, ?, ?)
    ''', (user_id, start_date, end_date))

    conn.commit()
    conn.close()

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
    asyncio.create_task(unban_user(user_id))

    return end_date

def generate_payment_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    chars = string.ascii_uppercase + string.digits
    return ''.join(random.choice(chars) for _ in range(6))


def add_payment_request(user_id, comment):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO payments (user_id, comment, status) 
    VALUES (?, ?, ?)
    ''', (user_id, comment, 'pending'))
    payment_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return payment_id


# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    add_user(user_id, username, full_name)
    subscription_end = check_user_subscription(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

    keyboard = InlineKeyboardBuilder()

    if subscription_end:
        try:
            invite_link = await bot.create_chat_invite_link(
                chat_id=ALERTS_CHANNEL_ID,
                member_limit=1
            )
            keyboard.add(InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
                url=invite_link.invite_link
            ))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            if check_trial_period(user_id):
                msg = "üéâ –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 24 —á–∞—Å–∞!"
            else:
                msg = f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription_end}"

            await message.answer(msg, reply_markup=keyboard.as_markup())

        except Exception as e:
            print(f"Error creating invite link: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        keyboard.add(InlineKeyboardButton(
            text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–∞–ª",
            callback_data="activate_trial"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            callback_data="buy_subscription"
        ))

        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–ª–µ—Ä—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n"
            "–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 24 —á–∞—Å–∞ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            reply_markup=keyboard.as_markup()
        )

@dp.callback_query(F.data == "activate_trial")
async def activate_trial(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # Check if trial was already used
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT trial_start_date FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()

    if result and result[0]:  # Trial already exists
        trial_start = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
        trial_end = trial_start + timedelta(hours=TRIAL_PERIOD_HOURS)

        if datetime.now() < trial_end:
            await callback.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)
        else:
            await callback.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø—Ä–æ–±–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.",
                                  show_alert=True)
        conn.close()
        return

    # Activate trial
    try:
        cursor.execute('''
        UPDATE users SET trial_start_date = ?, banned = FALSE 
        WHERE user_id = ?
        ''', (datetime.now().strftime('%Y-%m-%d %H:%M:%S'), user_id))
        conn.commit()

        # Create channel invite
        invite_link = await bot.create_chat_invite_link(
            chat_id=ALERTS_CHANNEL_ID,
            member_limit=1
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
            url=invite_link.invite_link
        ))

        await callback.message.edit_text(
            "üéâ –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 24 —á–∞—Å–∞!\n\n",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        print(f"Error activating trial: {e}")
    finally:
        conn.close()

    await callback.answer()


@dp.callback_query(F.data == "buy_subscription")
async def buy_subscription(callback: types.CallbackQuery):
    payment_code = generate_payment_code()
    payment_id = add_payment_request(callback.from_user.id, payment_code)

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
        callback_data=f"payment_done_{payment_id}"
    ))
    keyboard.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_start"
    ))

    await callback.message.edit_text(
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 100 —Ä—É–± –Ω–∞ –Ω–æ–º–µ—Ä {PAYMENT_PHONE}\n"
        f"2. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: {payment_code}\n\n"
        "3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("payment_done_"))
async def payment_done(callback: types.CallbackQuery):
    payment_id = int(callback.data.split('_')[2])

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    admin_keyboard = InlineKeyboardBuilder()
    admin_keyboard.add(InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=f"confirm_payment_{payment_id}"
    ))
    admin_keyboard.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data=f"reject_payment_{payment_id}"
    ))

    await bot.send_message(
        ADMIN_ID,
        f"üîî –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç @{callback.from_user.username}\n"
        f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É:",
        reply_markup=admin_keyboard.as_markup()
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_start"
    ))

    await callback.message.edit_text(
        "üïí –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment(callback: types.CallbackQuery):
    payment_id = int(callback.data.split('_')[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM payments WHERE payment_id = ?', (payment_id,))
    user_id = cursor.fetchone()[0]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É (30 –¥–Ω–µ–π) - —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —Ä–∞–∑–±–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    end_date = add_subscription(user_id, 30)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    cursor.execute('UPDATE payments SET status = "confirmed" WHERE payment_id = ?', (payment_id,))
    conn.commit()
    conn.close()

    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    invite_link = await bot.create_chat_invite_link(
        chat_id=ALERTS_CHANNEL_ID,
        member_limit=1
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
        url=invite_link.invite_link
    ))

    await bot.send_message(
        user_id,
        f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end_date}!\n\n",
        reply_markup=keyboard.as_markup()
    )

    await callback.message.edit_text(f"‚úÖ –ü–ª–∞—Ç–µ–∂ #{payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
    await callback.answer()


@dp.callback_query(F.data.startswith("reject_payment_"))
async def reject_payment(callback: types.CallbackQuery):
    payment_id = int(callback.data.split('_')[2])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE payments SET status = "rejected" WHERE payment_id = ?', (payment_id,))
    conn.commit()
    conn.close()

    await callback.message.edit_text(f"‚ùå –ü–ª–∞—Ç–µ–∂ #{payment_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    await callback.answer()


@dp.callback_query(F.data == "back_to_start")
async def back_to_start(callback: types.CallbackQuery):
    await cmd_start(callback.message)
    await callback.answer()


# === –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–û–ö –ò –£–î–ê–õ–ï–ù–ò–ï –ò–ó –ö–ê–ù–ê–õ–ê ===
async def subscription_checker():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            conn = sqlite3.connect('alerts_bot.db')
            cursor = conn.cursor()
            cursor.execute('SELECT DISTINCT user_id FROM subscriptions WHERE status = "active"')
            users = cursor.fetchall()
            conn.close()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (user_id,) in users:
                check_user_subscription(user_id)

            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ subscription_checker: {e}")
            await asyncio.sleep(60)

async def check_expired_subscriptions():
    """Check and remove users with expired subscriptions"""
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()

    # Find users with expired subscriptions or trials
    cursor.execute('''
    SELECT u.user_id, s.subscription_id
    FROM users u
    LEFT JOIN subscriptions s ON u.user_id = s.user_id AND s.status = 'active'
    WHERE 
        (u.trial_start_date IS NOT NULL AND 
         datetime(u.trial_start_date, '+24 hours') <= datetime('now')) OR
        (s.end_date IS NOT NULL AND 
         datetime(s.end_date) <= datetime('now'))
    AND u.banned = FALSE
    ''')

    expired_users = cursor.fetchall()

    for user_id, subscription_id in expired_users:
        try:
            # Ban from channel
            await bot.ban_chat_member(
                chat_id=ALERTS_CHANNEL_ID,
                user_id=user_id
            )

            # Mark as banned in DB and update subscription status
            cursor.execute('UPDATE users SET banned = TRUE WHERE user_id = ?', (user_id,))
            if subscription_id:
                cursor.execute('UPDATE subscriptions SET status = "expired" WHERE subscription_id = ?', (subscription_id,))

            # Notify user
            await bot.send_message(
                user_id,
                "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç.\n"
                "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–Ω–æ–≤–∞."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    conn.commit()
    conn.close()


# === –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect('alerts_bot.db')
    cursor = conn.cursor()

    cursor.execute('''
    SELECT u.user_id, u.username, u.full_name, 
           CASE 
               WHEN datetime(u.trial_start_date, '+24 hours') > datetime('now') THEN 'Trial'
               WHEN s.end_date IS NOT NULL AND datetime(s.end_date) > datetime('now') THEN 'Subscribed'
               ELSE 'No subscription'
           END as status
    FROM users u
    LEFT JOIN subscriptions s ON u.user_id = s.user_id AND s.status = 'active'
    ORDER BY u.registration_date DESC
    ''')

    users = cursor.fetchall()
    conn.close()

    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_list = "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        user_id, username, full_name, status = user
        users_list += f"üÜî ID: {user_id}\nüë§ –ò–º—è: {full_name}\nüìõ Username: @{username}\nüîπ –°—Ç–∞—Ç—É—Å: {status}\n\n"

    await message.answer(users_list)


@dp.message(Command("grant_sub"))
async def grant_subscription(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /grant_sub user_id days
        args = message.text.split()
        if len(args) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")

        user_id = int(args[1])
        days = int(args[2])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É - —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —Ä–∞–∑–±–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        end_date = add_subscription(user_id, days)

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        invite_link = await bot.create_chat_invite_link(
            chat_id=ALERTS_CHANNEL_ID,
            member_limit=1
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
            url=invite_link.invite_link
        ))

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –¥–Ω–µ–π (–¥–æ {end_date})!\n\n",
            reply_markup=keyboard.as_markup()
        )

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π (–¥–æ {end_date})")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /grant_sub user_id days")


@dp.message(Command("revoke_sub"))
async def revoke_subscription(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /revoke_sub user_id
        args = message.text.split()
        if len(args) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")

        user_id = int(args[1])

        # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('alerts_bot.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM subscriptions WHERE user_id = ?', (user_id,))
        cursor.execute('UPDATE users SET banned = TRUE WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞
        try:
            await bot.ban_chat_member(
                chat_id=ALERTS_CHANNEL_ID,
                user_id=user_id
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç."
        )

        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /revoke_sub user_id")


# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
async def on_startup():
    # Start background tasks
    asyncio.create_task(scheduled_checker())  # For alerts
    asyncio.create_task(subscription_checker())  # For subscriptions

    # Initial check of subscriptions
    await check_expired_subscriptions()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


async def main():
    await on_startup()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())